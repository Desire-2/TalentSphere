version: '3.8'

services:
  # TalentSphere Backend (Optimized)
  backend:
    build: .
    ports:
      - "${PORT:-5001}:5001"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV:-production}
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - SLOW_QUERY_THRESHOLD=1.0
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - SQL_ECHO=false
    depends_on:
      - redis
    volumes:
      - ./src/database:/app/src/database  # Persist SQLite database if used
    networks:
      - talentsphere-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache (Performance Optimization)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - talentsphere-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Performance Monitoring (Optional)
  monitoring:
    build: .
    command: ["python", "monitor_performance.py"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - talentsphere-network
    profiles:
      - monitoring
    restart: "no"

volumes:
  redis-data:
    driver: local

networks:
  talentsphere-network:
    driver: bridge
